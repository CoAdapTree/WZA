
// set up a simulation of local adaptation in an island model
// assuming a Gaussian model of stabilising selection

initialize() {

	defineConstant("optimaFile", "~/projects/def-whitlock/booker/GEA/slim_configs/BC_Map_environments.14x14.txt");
//	defineConstant("optimaFile", "/Users/s0784966/UBC/GEA/simulations/slim_configs/BC_Map_environments.14x14.txt");
	
	defineConstant("N", 100);

//	defineConstant("s", 0.00065); // This gives a fitness reduction of 1/10 between environmental extremes with 12 loci
//	defineConstant("s", 0.0003); // This gives a fitness reduction of 1/20 between environmental extremes with 12 loci
//	defineConstant("s", 0.000065); // This gives a fitness reduction of 1/100 between environmental extremes with 12 loci


//	defineConstant("REP", 1); // For saving files


// For an island model Fst is well described and we can set the migration rate using the theoretical expectation
	defineConstant("Fst", 0.03);

// Keep track of the tree sequence for the population
	initializeTreeSeq();

	initializeMutationRate(1e-7);
	
// m2 mutation type: QTL-type
	initializeMutationType("m2", 0.5, "f", 0.0);
	
// g1 genomic element type: uses m2 for all mutations
	initializeGenomicElementType("g1", m2, 1.0);
	
	geneNumber = 501; // This is actually 1+ the gene number

initializeGenomicElement(g1, 334998, 334998);
initializeGenomicElement(g1, 664998, 664998);
initializeGenomicElement(g1, 994998, 994998);
initializeGenomicElement(g1, 1324998, 1324998);
initializeGenomicElement(g1, 1654998, 1654998);
initializeGenomicElement(g1, 1984998, 1984998);
initializeGenomicElement(g1, 2314998, 2314998);
initializeGenomicElement(g1, 2644998, 2644998);
initializeGenomicElement(g1, 2974998, 2974998);
initializeGenomicElement(g1, 3304998, 3304998);
initializeGenomicElement(g1, 3634998, 3634998);
initializeGenomicElement(g1, 3964998, 3964998);

// Initialise 12 QTL  across the genome, slap a single selected base in the middle of each "gene" 
//	initializeGenomicElement(g1, 664998, 664998);
//	initializeGenomicElement(g1, 1334998, 1334998);
//	initializeGenomicElement(g1, 1984998, 1984998);
//	initializeGenomicElement(g1, 2644998, 2644998);
//	initializeGenomicElement(g1, 3304998, 3304998);
//	initializeGenomicElement(g1, 3964998, 3964998);
//	initializeGenomicElement(g1, 4624998, 4624998);
//	initializeGenomicElement(g1, 5284998, 5284998);
//	initializeGenomicElement(g1, 5944998, 5944998);
//	initializeGenomicElement(g1, 6604998, 6604998);
//	initializeGenomicElement(g1, 7264998, 7264998);
//	initializeGenomicElement(g1, 7924998, 7924998);


	r = 1e-7;
//	r = 1e-7*20;
	
	r_inter = 0.005;
	
	
	recRates = float((geneNumber *2) -1);
	recRates[0] = r_inter;
	
	recBreaks = integer((geneNumber *2) -1);
	recBreaks[0] = 1;

	for (ind in seq(2,geneNumber)){
		if ( ind%asInteger(geneNumber/5) == 0 ) {
			r_inter = 0.5;
			}
		else {
			r_inter =0.005;
			} 
		recRates[(ind - 1)*2 - 1] = r;
		recRates[(ind - 1)*2  ] = r_inter;
//		gene_span = (ind-1)*(500) -1;
//		gene_end = (ind-1)*(500) ;
		gene_span = (ind-1)*(10000) -1;
		gene_end = (ind-1)*(10000) ;
			cat(gene_span + '\n');
		recBreaks[(ind-1)*2 - 1] = gene_span;
		recBreaks[(ind-1)*2 ] = gene_end;
	}
	initializeRecombinationRate(recRates, recBreaks);

}


1 late() {
	optima = readFile(optimaFile);	
	subpopCount = length(optima);
//	subpopCount = 20;

	tempID = "p999";
	sim.addSubpop(tempID, subpopCount*N);
}

// This is for dewvelopment, to keep track of how simulations are progressing
//1:30100 {
//	if (sim.generation%100 == 0){
//	cat(sim.generation + "\n");
//		}
//}

// the QTLs themselves are selectively neutral; their selective effect is generated by their contribution to the phenotype and that is handled below
fitness(m2) {
	return 1.0;
}

	
100 late(){
// We probably won't get a lot of substitutions, but let's turn them off because we want to keep a record of the phenotypes
	m2.convertToSubstitution = F;
	m2.mutationStackPolicy = "f";
	
// Read a list of optima from a simple text file (one line/one entry per population).
// Make this a command line argument

	optima = readFile(optimaFile);
	subpopCount = length(optima);
//	subpopCount = 20;
	for (i in 0:(subpopCount-1)){
		sim.addSubpopSplit(i, N, p999);
		sim.subpopulations[i].tag = asInteger(optima[i]);
	}

// Reduce the initial subpopulation to 0 individuals 
	p999.setSubpopulationSize(0);
		
// Set the migration rate based on the specified Fst
	mig = ((1/Fst) - 1)/(4*N*subpopCount);

// Make migration constant between all demes!
	for (i in 0:(subpopCount-1))
		for (j in 0:(subpopCount-1))
			if (i != j)
				sim.subpopulations[i].setMigrationRates(j, mig);
}

// After 20000 generations of adapting to a dumb optimum, impose a model of stabilising selection 
// All populations are adapting to the same optimum of 0.0 


101:180100 fitness(m2) {
	if (genome1.individual.subpopulation.tag != genome2.individual.subpopulation.tag)
		return "a";
	else
		return 1. + s*0;
}

180101:200101 fitness(m2) {
	if (genome1.individual.subpopulation.tag != genome2.individual.subpopulation.tag)
		return "a";
	else
		return 1. + s*genome1.individual.subpopulation.tag;
}


200102 early() {
	sim.treeSeqOutput(paste(c(REP,"_", s, ".12Loci.directionalSelection.trees"), sep=""));	
	sim.simulationFinished();
}

